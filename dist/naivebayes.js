/**
 * @file naivebayes v0.5.0
 * @copyright Copyright (c) Surmon. All rights reserved.
 * @license Released under the MIT License.
 * @author Surmon <https://github.com/surmon-china>
 */
!function(t,o){"object"==typeof exports&&"undefined"!=typeof module?module.exports=o():"function"==typeof define&&define.amd?define(o):(t=t||self).Naivebayes=o()}(this,(function(){"use strict";var t=["categories","docCount","totalDocuments","vocabulary","wordCount","wordFrequencyCount","options"],o=function(t){return t.replace(/[^(a-zA-ZA-Яa-я\u4e00-\u9fa50-9_)+\s]/g," ").replace(/[\u4e00-\u9fa5]/g,(function(t){return t+" "})).split(/\s+/)},e=function(t){if(this.options={},void 0!==t){if(!t||"object"!=typeof t||Array.isArray(t))throw TypeError("NaiveBayes got invalid `options`: `"+t+"`. Pass in an object.");this.options=t}this.tokenizer=this.options.tokenizer||o,this.vocabulary=[],this.totalDocuments=0,this.docCount={},this.wordCount={},this.wordFrequencyCount={},this.categories=[]};return e.prototype.initializeCategory=function(t){return this.categories.includes(t)||(this.docCount[t]=0,this.wordCount[t]=0,this.wordFrequencyCount[t]={},this.categories.push(t)),this},e.prototype.learn=function(t,o){var e=this;this.initializeCategory(o),this.docCount[o]++,this.totalDocuments++;var r=this.tokenizer(t),n=this.frequencyTable(r);return Object.keys(n).forEach((function(t){e.vocabulary.includes(t)||e.vocabulary.push(t);var r=n[t];e.wordFrequencyCount[o][t]?e.wordFrequencyCount[o][t]+=r:e.wordFrequencyCount[o][t]=r,e.wordCount[o]+=r})),this},e.prototype.categorize=function(t,o){return o?this.probabilities(t)[0]:this.probabilities(t)[0].category},e.prototype.probabilities=function(t){var o=this,e=this.tokenizer(t),r=this.frequencyTable(e);return this.categories.map((function(t){var e=o.docCount[t]/o.totalDocuments,n=Math.log(e);return Object.keys(r).forEach((function(e){var i=r[e],s=o.tokenProbability(e,t);n+=i*Math.log(s)})),{category:t,probability:n}})).sort((function(t,o){return o.probability-t.probability}))},e.prototype.tokenProbability=function(t,o){return((this.wordFrequencyCount[o][t]||0)+1)/(this.wordCount[o]+this.vocabulary.length)},e.prototype.frequencyTable=function(t){var o=Object.create(null);return t.forEach((function(t){o[t]?o[t]++:o[t]=1})),o},e.prototype.toJson=function(t){var o=t?2:0;return JSON.stringify(this.toJsonObject(),null,o)},e.prototype.toJsonObject=function(){var o=this,e={};return t.forEach((function(t){return e[t]=o[t]})),e},e.fromJson=function(o){if("string"==typeof o)try{o=JSON.parse(o)}catch(t){throw new Error("Naivebayes.fromJson expects a valid JSON string.")}o.options=o.options||{};var r=new e(o.options);return t.forEach((function(t){if(null==o[t])throw new Error("NaiveBayes.fromJson: JSON string is missing an expected property: '"+t+"'.");r[t]=o[t]})),r},e.getStateKeys=function(){return t},e}));